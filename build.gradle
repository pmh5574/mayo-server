buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.convert' version '1.5.8'
}

group = 'com.mayo.server'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2022.0.2")
}

repositories {
    mavenCentral()
}

if (!project.hasProperty('profile') || !profile) {
    ext.profile = 'local'
}

group = 'com.mayo.server'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-test-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.6'

    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'org.hibernate.orm:hibernate-core:6.0.2.Final'
    implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'

    implementation 'org.apache.commons:commons-pool2:2.11.1'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.7.0'
    implementation 'org.postgresql:postgresql:42.7.3'

    // 파싱
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.31'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // aws
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.408'
    testImplementation 'software.amazon.awssdk:sns:2.27.10'
    implementation 'software.amazon.awssdk:sns:2.20.0'

    // getter, setter 등..
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'


    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources", "src/main/java"]
        }
    }
}

// FROM 디렉토리 설정 (querydsql)
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
// TO 디렉토리 설정 (querydsql)

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

test {
    useJUnitPlatform()
}